package com.tygas.tianyu.tianyu.ui.view.activity;

import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.provider.CallLog;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest;
import com.marshalchen.ultimaterecyclerview.UltimateRecyclerView;
import com.tygas.tianyu.tianyu.R;
import com.tygas.tianyu.tianyu.context.MyAppCollection;
import com.tygas.tianyu.tianyu.context.PhonStateLisen;
import com.tygas.tianyu.tianyu.data.UrlData;
import com.tygas.tianyu.tianyu.ui.adapter.ClueUltiRecycleAdapter;
import com.tygas.tianyu.tianyu.ui.model.Clue;
import com.tygas.tianyu.tianyu.ui.model.User;
import com.tygas.tianyu.tianyu.utils.HttpUtilsHelper;
import com.tygas.tianyu.tianyu.utils.SystemBarUtils;
import com.tygas.tianyu.tianyu.utils.XutilsRequest;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;

/**
 * Created by SJTY_YX on 2016/1/19.
 * 我的线索列表
 */
public class ClueActivity extends AppCompatActivity implements View.OnClickListener, UltimateRecyclerView.OnLoadMoreListener, SwipeRefreshLayout.OnRefreshListener {

    private ImageView backImageView;//返回按钮
    private ImageView filterImageView;//筛选按钮

    private UltimateRecyclerView ultimateRecyclerView;
    private TextView emptyView;//没有数据的时候的视图
    private LinearLayoutManager linearLayoutManager;
    private ViewGroup loadMoreView;//加载更多的时候的布局
    private ClueUltiRecycleAdapter adapter;
    private ArrayList<Clue> data;

    private User user;//员工信息
    private String clueName;//线索姓名
    private String cluePhone;//线索电话
    private String cusempname = "";//员工电话
    private String isExpiry;//时候逾期
    private String begintime;
    private String endtime;
    private int pageIndex;//
    private String pageSize = "10";//页数大小


    private boolean isRefresh;//是否是 重新加载
    private boolean havemoreData;//是否有多的数据

    private Clue nowClue;//当前的clue
    private String recordPath;//当前录音的路径
    private PhonStateLisen phonStateLisen;
    private TelephonyManager manager;

    private static final String LOG_TAG = "ClueActivity";

    public static final int CALL_PHONE_RESULT = 0x0002;
    private static final int FILTER_REQUEST_CODE = 0x0001;//筛选的请求码

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        SystemBarUtils.setSystemBarColor(this, "#327ECA");
        setContentView(R.layout.activity_clue);
        MyAppCollection myAppCollection = (MyAppCollection) getApplicationContext();
        if(myAppCollection.getUser() != null){
            user = myAppCollection.getUser();
        }else{
            finish();
        }
        phonStateLisen = myAppCollection.getPhonStateLisen();
        manager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
        manager.listen(phonStateLisen, PhoneStateListener.LISTEN_CALL_STATE);
        initView();
        initData();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if(manager != null){
            Log.i(LOG_TAG,"[调用destory设置监听为null]");
            manager.listen(null,PhoneStateListener.LISTEN_CALL_STATE);
        }
    }

    public void setNowClue(Clue nowClue) {
        this.nowClue = nowClue;
    }

    public void setRecordPath(String recordPath) {
        this.recordPath = recordPath;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        if(requestCode == CALL_PHONE_RESULT){
            //打电话后处理
            dealCallPhoneAfter();
        }

        if(resultCode == RESULT_OK){
            switch (requestCode){
                case FILTER_REQUEST_CODE:
                    /*intent.putExtra("name", name);
                    intent.putExtra("phone", phone);
                    intent.putExtra("isExpire",isExpire);
                    intent.putExtra("starttime",starttime);
                    intent.putExtra("endtime",endtime);*/
                    clueName = data.getStringExtra("name");
                    cluePhone = data.getStringExtra("phone");
                    cusempname = data.getStringExtra("empName");
                    isExpiry = data.getStringExtra("isExpire");
                    begintime = data.getStringExtra("starttime");
                    endtime = data.getStringExtra("endtime");
                    pageIndex = 1;
                    initDataByFilter();
                    break;
            }
        }//end resultcode
    }//end onActivityResult

    //打电话后的处理
    private void dealCallPhoneAfter() {

        //获取通话记录
        ContentResolver resolver = getContentResolver();
        Cursor query = resolver.query(CallLog.Calls.CONTENT_URI,
                null, null, null, CallLog.Calls.DATE + " desc limit 1");
        if(query == null || nowClue == null){
            Toast.makeText(this,"读取通话记录失败",Toast.LENGTH_SHORT).show();
            return;
        }

        query.moveToFirst();
        String number = query.getString(query.getColumnIndex(CallLog.Calls.NUMBER));
        long duration = query.getLong(query.getColumnIndex(CallLog.Calls.DURATION));//通话时长
        Log.i(LOG_TAG, "[读取到的通话记录]" + number + "  duration " + duration);
        if(number.equals(nowClue.getCluePhone()) && duration != 0){
            //通话成功
            Log.i(LOG_TAG, "[ok]");
            Intent intent = new Intent();
            intent.putExtra("data", nowClue);
            intent.putExtra("path", recordPath);
            intent.putExtra("duration", duration);
            intent.setClass(this, ClueReturnVisitOk.class);
            startActivity(intent);
        }else{
            //通话失败
            Intent intent = new Intent();
            intent.putExtra("data", nowClue);
            intent.putExtra("path", recordPath);
            intent.setClass(this, ClueReturnVisitFail.class);
            //删除录音文件
            File temp = new File(recordPath);
            if (temp.exists() && temp.isFile()) {
                temp.delete();
            }
            //intent.setClass(this,ReturnVisitOk.class);
            startActivity(intent);
        }
    }


    private void initData() {
        clueName = "";
        cluePhone = "";
        isExpiry = "false";
        begintime = endtime = getNowTime();
        pageIndex = 1;
        setRefreshing(true);
        isRefresh = true;
        loadData();
    }

    private void initDataByFilter() {
        setRefreshing(true);
        isRefresh = true;
        if(data != null){
            data.clear();
            adapter.notifyDataSetChanged();
        }
        loadData();
    }

    private void loadData() {
        RequestParams requestParams = XutilsRequest.getClueList(user.getEmpId(),clueName,cluePhone,
                                                                isExpiry,begintime,endtime,String.valueOf(pageIndex),
                                                                pageSize,cusempname);
        Log.i(LOG_TAG,"[加载数据的参数] clueName "+clueName+"   cluePhone "+cluePhone+"  isExpiry "+isExpiry+"  begintime "+begintime+"  endtime "+endtime+"  pageIndex "+pageIndex);

        HttpUtils httpUtils = HttpUtilsHelper.getInstance();
        httpUtils.send(HttpRequest.HttpMethod.POST, /*"http://118.123.249.59:1999/OpenService/App.aspx?type=cluelist"*/
                                UrlData.CLUELIST_URL, requestParams, new RequestCallBack<String>() {
            @Override
            public void onSuccess(ResponseInfo<String> responseInfo) {
                setRefreshing(false);
                //{'empid':'1','clueName':'','cluePhone':'','isExpiry':'false','begintime':'2015-01-11','endtime':'2015-11-30','pageindex':'1','pagesize':'10'}
                Log.i(LOG_TAG, "[请求返回的数据]" + responseInfo.result);
                if (responseInfo.result != null && responseInfo.result.length() > 4) {
                    //解析
                    try {
                        parseResult(responseInfo.result);
                    } catch (JSONException e) {
                        e.printStackTrace();
                        Log.i(LOG_TAG,"[数据解析错误]"+e);
                        Toast.makeText(ClueActivity.this, "数据解析错误", Toast.LENGTH_SHORT).show();
                        showEmptyView();
                    }
                }

                showEmptyView();
            }

            @Override
            public void onFailure(HttpException e, String s) {
                Toast.makeText(ClueActivity.this, "网络请求错误", Toast.LENGTH_SHORT).show();
                setRefreshing(false);
                showEmptyView();
            }
        });
    }

    //解析请求的数据 {"status":"Success","message":"查询DataSet为空.","data":"{\"ClueList\":null}"}
    private void parseResult(String result) throws JSONException {
        JSONObject jsonObject = new JSONObject(result);
        String status = jsonObject.getString("status");
        if("Success".equals(status)){
            String dataStr = jsonObject.getString("data");
            if(dataStr != null && dataStr.length() > 4){
                JSONObject dataobj = new JSONObject(dataStr);
                JSONArray arr = dataobj.optJSONArray("ClueList");
                if(arr == null || arr.length() == 0){
                    havemoreData = false;
                }else{
                    if(data == null){
                        data = new ArrayList<>();
                    }
                    if(isRefresh){
                        //整体刷新
                        data.clear();
                        isRefresh = false;
                    }
                    for(int i=0;i<arr.length();i++){
                        data.add(parseClue(arr.getJSONObject(i)));
                    }
                    if(adapter == null){
                        //ClueUltiRecycleAdapter(ClueActivity clueActivity,ArrayList<Clue> data,PhonStateLisen phonStateLisen)
                        adapter = new ClueUltiRecycleAdapter(this,data,phonStateLisen);
                        adapter.setCustomLoadMoreView(loadMoreView);
                        ultimateRecyclerView.setAdapter(adapter);
                    }
                    adapter.notifyDataSetChanged();

                    int totalrows = Integer.valueOf(dataobj.getString("totalrows")); //这里和文档不一样
                    Log.i(LOG_TAG,"[数据大小]  totalrows "+totalrows+"   data.size() "+data.size());
                    if(totalrows > data.size()){
                        havemoreData = true;
                        pageIndex++;
                    }else{
                        havemoreData = false;
                    }
                }

            }else{
                Toast.makeText(this,"数据返回异常"+jsonObject.getString("message"),Toast.LENGTH_SHORT).show();
            }
        }else{
            Toast.makeText(this,"数据返回失败",Toast.LENGTH_SHORT).show();
        }
    }

    private Clue parseClue(JSONObject jsonObject) throws JSONException {
        Clue clue = new Clue();
        clue.setClueId(jsonObject.getString("clueId"));
        clue.setClueName(jsonObject.getString("clueName"));
        clue.setCluePhone(jsonObject.getString("cluePhone"));
        clue.setEmpName(jsonObject.getString("empName"));
        clue.setIntentLevel(jsonObject.getString("intentLevel"));
        clue.setLastContratTime(jsonObject.getString("lastContratTime"));
        clue.setCarseriesName(jsonObject.getString("carseriesName"));
        clue.setCarModelName(jsonObject.getString("carModelName"));
        clue.setSourceChannelName(jsonObject.getString("sourceChannelName"));
        clue.setLiveProvince(jsonObject.getString("liveProvince"));
        clue.setLiveCity(jsonObject.getString("liveCity"));
        clue.setLiveArea(jsonObject.getString("liveArea"));
        clue.setChannelName(jsonObject.getString("channelName"));
        clue.setNextCallTime(jsonObject.getString("nextCallTime"));
        return clue;
    }


    private void showLoadMore(){
        if(havemoreData){
            loadMoreView.getChildAt(0).setVisibility(View.VISIBLE);
            TextView textView = (TextView) loadMoreView.getChildAt(1);
            textView.setText("加载..");
        }else{
            loadMoreView.getChildAt(0).setVisibility(View.INVISIBLE);
            TextView textView = (TextView) loadMoreView.getChildAt(1);
            textView.setText("没有更多数据");
        }
    }

    /**
     * 没有数据显示
     *
     *
     */
    private void showEmptyView(){
        if(data == null || data.size() == 0){
            emptyView.setVisibility(View.VISIBLE);
        }else{
            emptyView.setVisibility(View.GONE);
        }
    }

    /**
     * 刷新 下拉控件
     * @param flag true 刷新 false 不刷新
     */
    private void setRefreshing(boolean flag){
        if(ultimateRecyclerView != null){
            if(flag){
                ultimateRecyclerView.post(new Runnable() {
                    @Override
                    public void run() {
                        ultimateRecyclerView.setRefreshing(true);
                    }
                });
            }else{
                ultimateRecyclerView.post(new Runnable() {
                    @Override
                    public void run() {
                        ultimateRecyclerView.setRefreshing(false);
                    }
                });
            }
        }
    }

    private String getNowTime(){
        Calendar calendar = Calendar.getInstance();
        int y = calendar.get(Calendar.YEAR);
        int m = calendar.get(Calendar.MONTH)+1;
        int d = calendar.get(Calendar.DATE);
        return y+"-"+m+"-"+d;
    }

    private void initView() {
        backImageView = (ImageView) findViewById(R.id.activity_clue_iv_back);
        backImageView.setOnClickListener(this);
        filterImageView = (ImageView) findViewById(R.id.activity_clue_iv_filter);
        filterImageView.setOnClickListener(this);

        ultimateRecyclerView = (UltimateRecyclerView) findViewById(R.id.activity_clue_urv_list);
        linearLayoutManager = new LinearLayoutManager(this);
        ultimateRecyclerView.setLayoutManager(linearLayoutManager);
        ultimateRecyclerView.enableLoadmore();
        ultimateRecyclerView.setHasFixedSize(false);
        ultimateRecyclerView.setOnLoadMoreListener(this);
        ultimateRecyclerView.setDefaultOnRefreshListener(this);

        emptyView = (TextView) findViewById(R.id.activity_clue_tv_empty);
        emptyView.setVisibility(View.GONE);
        loadMoreView = (ViewGroup) View.inflate(this, R.layout.custom_bottom_progressbar, null);

        data = new ArrayList<>();
        //ClueUltiRecycleAdapter(ClueActivity clueActivity,ArrayList<Clue> data,PhonStateLisen phonStateLisen)
        adapter = new ClueUltiRecycleAdapter(this,data,phonStateLisen);
        adapter.setCustomLoadMoreView(loadMoreView);
        ultimateRecyclerView.setAdapter(adapter);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.activity_clue_iv_back://点击返回按钮
                finish();
                break;
            case R.id.activity_clue_iv_filter://点击筛选按钮
                Log.i(LOG_TAG, "[点击了筛选按钮]  begintime " + begintime + "  endtime " + endtime);
                Intent intent = new Intent();
                intent.setClass(this,ClueFilterActivity.class);
                intent.putExtra("begintime", begintime);
                intent.putExtra("endtime",endtime);
                startActivityForResult(intent, FILTER_REQUEST_CODE);
                break;
        }
    }

    @Override
    public void loadMore(int itemsCount, int maxLastVisiblePosition) {
        Log.i(LOG_TAG, "[loadmore]");
        if(havemoreData){
            loadData();
        }
        showLoadMore();
    }

    @Override
    public void onRefresh() {
        initData();
        Log.i(LOG_TAG,"[onRefresh]");
    }
}
