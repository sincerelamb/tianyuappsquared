package com.tygas.tianyu.tianyu.ui.view.activity;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.RemoteViews;
import android.widget.TextView;
import android.widget.Toast;

import com.lidroid.xutils.DbUtils;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.DbException;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest;
import com.tygas.tianyu.tianyu.R;
import com.tygas.tianyu.tianyu.context.MyAppCollection;
import com.tygas.tianyu.tianyu.data.SharedPreferencesDate;
import com.tygas.tianyu.tianyu.data.UrlData;
import com.tygas.tianyu.tianyu.service.UpVersonService;
import com.tygas.tianyu.tianyu.ui.model.PID;
import com.tygas.tianyu.tianyu.ui.model.User;
import com.tygas.tianyu.tianyu.ui.model.UserPtInfoModel;
import com.tygas.tianyu.tianyu.utils.DbUtilsHelper;
import com.tygas.tianyu.tianyu.utils.HttpUtilsHelper;
import com.tygas.tianyu.tianyu.utils.JsonParser;
import com.tygas.tianyu.tianyu.utils.SystemBarUtils;
import com.tygas.tianyu.tianyu.utils.XutilsRequest;

import java.io.File;
import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.List;


public class MainActivity extends Activity {

    private RelativeLayout rl_ptcustomers;
    private RelativeLayout rl_clue;
    private RelativeLayout rl_cpcustomers;
    private TextView rv_ptcustomers_today_tatol;
    private TextView rv_ptcustomers_his_tatol;
    private TextView rv_clue_today_tatol;
    private TextView rv_clue_his_tatol;
    private TextView rv_cpcustomers_today_tatol;
    private TextView rv_cpcustomers_his_tatol;


    private TextView tv_zhanghao;
    private static final String PT_LIST = "AndroidApp_search_customer";
    private static final String CLUE_LIST = "AndroidApp_search_clue";
    private static final String CP_LIST = "AndroidApp_repair_customer";

    private DbUtils dbUtils;
    private User user;
    private PopupWindow popupWindow;
    private RecevieMessageUpDataUIBroad recevieMessageUpDataUIBroad;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        SystemBarUtils.setSystemBarColor(this, "#327ECA");
        setContentView(R.layout.activity_main);
        dbUtils = DbUtilsHelper.newInstance(this);
        user = ((MyAppCollection) getApplicationContext()).getUser();
        initBroad();
        initView();
        initdata();
        //   getUrlPackageCode();
        getUrlPackageCode();

    }

    @Override
    protected void onStart() {
        super.onStart();
        HttpUtilsHelper.downLoadUpdataUI(MainActivity.this, false, 0, false, false, false);
    }

    private void initBroad() {
        //生成广播处理
        recevieMessageUpDataUIBroad = new RecevieMessageUpDataUIBroad();
        //实例化过滤器并设置要过滤的广播
        IntentFilter intentFilter = new IntentFilter("ty.updataUI");
        //注册广播
        this.registerReceiver(recevieMessageUpDataUIBroad, intentFilter);
    }

    private void initdata() {
        List<UserPtInfoModel> list_userNum = user.getList_UserNum();
        infilterupdataUI(list_userNum);
    }

    private void infilterupdataUI(List<UserPtInfoModel> list_userNum) {
        if (list_userNum != null && list_userNum.size() > 0) {
            for (UserPtInfoModel userPtInfoModel : list_userNum) {
                String id = userPtInfoModel.getID();
                String pid = userPtInfoModel.getPID();
                switch (userPtInfoModel.getName()) {
                    case "潜客列表":
                        rv_ptcustomers_today_tatol.setText(id);
                        if("0".equals(id)){
                            rv_ptcustomers_today_tatol.setVisibility(View.GONE);
                        }else {
                            rv_ptcustomers_today_tatol.setVisibility(View.VISIBLE);
                        }

                        rv_ptcustomers_his_tatol.setText(pid);
                        if("0".equals(pid)){
                            rv_ptcustomers_his_tatol.setVisibility(View.GONE);
                        }else {
                            rv_ptcustomers_his_tatol.setVisibility(View.VISIBLE);
                        }


                        break;
                    case "线索列表":
//                        rv_clue_today_tatol.setText(userPtInfoModel.getID() + "");
//                        rv_clue_his_tatol.setText(userPtInfoModel.getPID() + "");

                        rv_clue_today_tatol.setText(id);
                        if("0".equals(id)){
                            rv_clue_today_tatol.setVisibility(View.GONE);
                        }else {
                            rv_clue_today_tatol.setVisibility(View.VISIBLE);
                        }

                        rv_clue_his_tatol.setText(pid);
                        if("0".equals(pid)){
                            rv_clue_his_tatol.setVisibility(View.GONE);
                        }else {
                            rv_clue_his_tatol.setVisibility(View.VISIBLE);
                        }

                        break;
                    case "补全列表":
//                        rv_cpcustomers_today_tatol.setText(userPtInfoModel.getID() + "");
//                        rv_cpcustomers_his_tatol.setText(userPtInfoModel.getPID() + "");


                        rv_cpcustomers_today_tatol.setText(id);
                        if("0".equals(id)){
                            rv_cpcustomers_today_tatol.setVisibility(View.GONE);
                        }else {
                            rv_cpcustomers_today_tatol.setVisibility(View.VISIBLE);
                        }

                        rv_cpcustomers_his_tatol.setText(pid);
                        if("0".equals(pid)){
                            rv_cpcustomers_his_tatol.setVisibility(View.GONE);
                        }else {
                            rv_cpcustomers_his_tatol.setVisibility(View.VISIBLE);
                        }
                        break;
                }
            }
        }
    }

    private void initView() {
        rl_ptcustomers = (RelativeLayout) findViewById(R.id.activity_main_rl_ptcustomers);
        rl_clue = (RelativeLayout) findViewById(R.id.activity_main_rl_clue);
        rl_cpcustomers = (RelativeLayout) findViewById(R.id.activity_main_rl_cpcustomers);
        rv_ptcustomers_today_tatol = (TextView) findViewById(R.id.activity_main_tv_ptcustomers_total_today);
        rv_ptcustomers_his_tatol = (TextView) findViewById(R.id.activity_main_tv_ptcustomers_total_history);
        rv_clue_today_tatol = (TextView) findViewById(R.id.activity_main_tv_clue_total_today);
        rv_clue_his_tatol = (TextView) findViewById(R.id.activity_main_tv_clue_total_history);
        rv_cpcustomers_today_tatol = (TextView) findViewById(R.id.activity_main_tv_cpcustomers_total_today);
        rv_cpcustomers_his_tatol = (TextView) findViewById(R.id.activity_main_tv_cpcustomers_total_history);


        tv_zhanghao = (TextView) findViewById(R.id.activity_main_tv_zhanghao);
        tv_zhanghao.setText(((MyAppCollection) getApplicationContext()).getUser().getEmpName());
        try {
            List<PID> list_pid = dbUtils.findAll(PID.class);
            Log.d("adadada", list_pid.toString());
            for (PID pid : list_pid) {
                switch (pid.getFormID()) {
                    case PT_LIST:
                        rl_ptcustomers.setVisibility(View.VISIBLE);
                        break;
                    case CLUE_LIST:
                        rl_clue.setVisibility(View.VISIBLE);
                        break;
                    case CP_LIST:
                        rl_cpcustomers.setVisibility(View.VISIBLE);
                        break;
                }
            }
        } catch (DbException e) {
            e.printStackTrace();
        }
    }


    public void listOnclick(View view) {
        switch (view.getId()) {
            case R.id.activity_main_rl_ptcustomers:
                Intent intent = new Intent(MainActivity.this, PtCustomersActivity.class);
                startActivity(intent);
                break;
            case R.id.activity_main_rl_cpcustomers:
                Intent intent_cp = new Intent(MainActivity.this, CpCustomActivity.class);
                startActivity(intent_cp);
                break;
            case R.id.activity_main_rl_clue:
                Intent intent_c = new Intent(MainActivity.this, ClueActivity.class);
                startActivity(intent_c);
                break;
            case R.id.activity_main_tv_exit:
                Intent intent_login = new Intent(MainActivity.this, LoginActivity.class);
                startActivity(intent_login);
                getSharedPreferences(SharedPreferencesDate.SHAREDPREFERENCES_NAME_USERINFO, MODE_PRIVATE).edit().putBoolean(SharedPreferencesDate.ISLOGIN, false).commit();
                getSharedPreferences(SharedPreferencesDate.SHAREDPREFERENCES_NAME_USERINFO, MODE_PRIVATE).edit().putString(SharedPreferencesDate.USER_REAL_NAME, "").commit();

                try {
                    dbUtils.deleteAll(User.class);
                    dbUtils.deleteAll(UserPtInfoModel.class);
                    dbUtils.deleteAll(PID.class);
                } catch (DbException e) {
                    e.printStackTrace();
                }
                finish();
                break;
            case R.id.activity_cpinfo_user_icon:
                // TODO Auto-generated method stub
                // 获取自定义布局文件activity_popupwindow_left.xml的视图

//                View popupWindow_view = getLayoutInflater().inflate(R.layout.user_info_popwindow, null, false);
//                TextView id = (TextView) popupWindow_view.findViewById(R.id.pop_id);
//                id.setText(user.getEmpId());
//                TextView name = (TextView) popupWindow_view.findViewById(R.id.pop_name);
//                name.setText(user.getEmpName());
//
//                // 创建PopupWindow实例,200,LayoutParams.MATCH_PARENT分别是宽度和高度
//                popupWindow = new PopupWindow(popupWindow_view, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, true);
//                // popupWindow_view.setBackground();
//                // 设置动画效果
//                //  popupWindow[0].setAnimationStyle(R.style.AnimationFade);
//                if (popupWindow.isShowing()) {
//                    popupWindow.dismiss();
//                } else {
//                    popupWindow.showAsDropDown(view);
//                }
                break;
        }
    }

    @Override
    protected void onDestroy() {
        unregisterReceiver(recevieMessageUpDataUIBroad);
        if (file != null && file.exists()) {
            Log.d("delete", "delete");
            file.delete();
            Intent media = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
            Uri contentUri = Uri.fromFile(file);
            media.setData(contentUri);
            MainActivity.this.sendBroadcast(media);
        }
        super.onDestroy();

    }


    private void getUrlPackageCode() {
        HttpUtilsHelper.getInstance().send(HttpRequest.HttpMethod.POST, UrlData.VERSON_URL, XutilsRequest.getVersonCode(), new RequestCallBack<Object>() {
            @Override
            public void onSuccess(ResponseInfo<Object> responseInfo) {
                Log.i("veron", responseInfo.result.toString());
                final Bundle bundle = JsonParser.versionCodeParser(responseInfo.result.toString());
                Log.d("bundle", bundle.toString());
                if (bundle.getBoolean("isSucces")) {
                    try {
                        final int versionCode = MainActivity.this.getPackageManager().getPackageInfo(getPackageName(), 0).versionCode;
                        if (versionCode <
                                Integer.parseInt(bundle.getString("APPVersion"))
                                ) {
                            //发现新版本，提示用户更新
                            final String appDownLoadPath = bundle.getString("APPDownLoadPath");
                            AlertDialog.Builder alert = new AlertDialog.Builder(MainActivity.this);
                            alert.setCancelable(false);
                            alert.setTitle("软件升级")
                                    .setMessage("发现新版本,建议立即更新使用.")
                                    .setPositiveButton("更新", new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int which) {

                                            // 创建通知
                                            createNotification();
                                            // 开始下载
                                            down(appDownLoadPath, appDownLoadPath.substring(appDownLoadPath.lastIndexOf("/") + 1));


                                        }
                                    });
//                                    .setNegativeButton("取消", new DialogInterface.OnClickListener() {
//                                        public void onClick(DialogInterface dialog, int which) {
//                                            dialog.dismiss();
//                                        }
//                                    });
                            if (getSharedPreferences(SharedPreferencesDate.SHAREDPREFERENCES_NAME_USERINFO, MODE_PRIVATE).getBoolean(SharedPreferencesDate.ISLOGIN, false)) {
                                alert.create().show();
                            }


                        } else {
                            //清理工作，略去
                            //cheanUpdateFile(),文章后面我会附上代码
                        }
                    } catch (PackageManager.NameNotFoundException e) {
                        e.printStackTrace();
                    }
                }

            }

            @Override
            public void onFailure(HttpException e, String s) {
                Log.i("veron", s);
            }
        });
    }

    // 定义一个变量，来标识是否退出
    private static boolean isExit = false;

    Handler mHandler = new Handler() {

        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            isExit = false;
        }
    };

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            exit();
            return false;
        }
        return super.onKeyDown(keyCode, event);
    }

    private void exit() {
        if (!isExit) {
            isExit = true;
            Toast.makeText(getApplicationContext(), "再按一次退出程序",
                    Toast.LENGTH_SHORT).show();
            // 利用handler延迟发送更改状态信息
            mHandler.sendEmptyMessageDelayed(0, 2000);
        } else {
            finish();

        }
    }


    class RecevieMessageUpDataUIBroad extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {
            List<UserPtInfoModel> upUIdata = (List<UserPtInfoModel>) intent.getSerializableExtra("upUIdata");
            infilterupdataUI(upUIdata);
        }
    }

    private int notification_id = 0;
    RemoteViews contentView;
    private NotificationManager notificationManager;
    private Notification notification;

    public void createNotification() {
        notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        notification = new Notification();
        notification.icon = R.mipmap.app_icon;
        // 这个参数是通知提示闪出来的值.
        notification.tickerText = "开始下载";

        // pendingIntent = PendingIntent.getActivity(this, 0, updateIntent, 0);

        // 这里面的参数是通知栏view显示的内容
        //  notification.setLatestEventInfo(this, app_name, "下载：0%", pendingIntent);

        // notificationManager.notify(notification_id, notification);

        /***
         * 在这里我们用自定的view来显示Notification
         */
        contentView = new RemoteViews(getPackageName(), R.layout.notification_item);
        contentView.setTextViewText(R.id.notificationTitle, "正在下载");
        contentView.setTextViewText(R.id.notificationPercent, "0%");
        contentView.setProgressBar(R.id.notificationProgress, 100, 0, false);

        notification.contentView = contentView;
        notificationManager.notify(notification_id, notification);
    }

    private File file;

    // 进行下载
    public void down(String url, String app_name) {


        String str = "/ " + app_name;
        String fileName = null;

        boolean sdCardExist = Environment.getExternalStorageState()
                .equals(Environment.MEDIA_MOUNTED);   //判断sd卡是否存在
        if (sdCardExist) {
            fileName = Environment.getExternalStorageDirectory() + str;
            file = new File(fileName);//获取跟目录
            if (file.exists()) {
                file.delete();
            }
            HttpUtilsHelper.httpUtils_updata.download(url, fileName,
                    true, true, new RequestCallBack<File>() {
                        @Override
                        public void onSuccess(ResponseInfo<File> arg0) {
                            // TODO Auto-generated method stub
                            notification.contentView.setTextViewText(R.id.notificationTitle, "下载完成");
                            notificationManager.notify(notification_id, notification);
                            upApp();
                        }


                        @Override
                        public void onLoading(long total, long current,
                                              boolean isUploading) {
                            double x_double = current * 1.0;
                            double tempresult = x_double / total;
                            DecimalFormat df1 = new DecimalFormat("0.00"); // ##.00%
                            // 百分比格式，后面不足2位的用0补齐
                            String result = df1.format(tempresult);
                            contentView.setTextViewText(R.id.notificationPercent, (int) (Float.parseFloat(result) * 100) + "%");
                            contentView.setProgressBar(R.id.notificationProgress, 100, (int) (Float.parseFloat(result) * 100), false);
                            notificationManager.notify(notification_id, notification);
                            super.onLoading(total, current, isUploading);
                        }

                        @Override
                        public void onStart() {
                            super.onStart();
                            notification.contentView.setTextViewText(R.id.notificationTitle, "准备下载");
                            notification.contentView.setProgressBar(R.id.notificationProgress, 100, 0, false);
                            notificationManager.notify(notification_id, notification);
                        }

                        @Override
                        public void onFailure(HttpException arg0, String arg1) {
                            Log.d("onFailure", arg1 + arg0.getMessage());
                            // TODO Auto-generated method stub
                            notification.contentView.setTextViewText(R.id.notificationTitle, "下载失败");
                            notificationManager.notify(notification_id, notification);
                        }
                    });


        }
    }


    public static String getMIMEType(File f) {
        String type = "";
        String fName = f.getName();
        // 取得扩展名
        String end = fName
                .substring(fName.lastIndexOf(".") + 1, fName.length());
        if (end.equals("apk")) {
            type = "application/vnd.android.package-archive";
        } else {
            // /*如果无法直接打开，就跳出软件列表给用户选择 */
            type = "*/*";
        }
        return type;
    }

    public void upApp() {
        Uri uri = Uri.fromFile(file);
        String type = getMIMEType(file);
        Intent intent = new Intent("android.intent.action.VIEW");
        intent.addCategory("android.intent.category.DEFAULT");
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setDataAndType(uri, type);
        startActivityForResult(intent, 2);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 2) {
            // file.delete();
        }
    }

}
