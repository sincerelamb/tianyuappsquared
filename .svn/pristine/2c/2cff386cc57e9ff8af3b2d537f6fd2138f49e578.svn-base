package com.tygas.tianyu.tianyu.ui.view.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.AssetManager;
import android.graphics.Paint;
import android.os.Bundle;
import android.os.Parcelable;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest;
import com.tygas.tianyu.tianyu.R;
import com.tygas.tianyu.tianyu.context.MyAppCollection;
import com.tygas.tianyu.tianyu.data.UrlData;
import com.tygas.tianyu.tianyu.ui.adapter.CpCustomFocusAdapter;
import com.tygas.tianyu.tianyu.ui.model.CityModel;
import com.tygas.tianyu.tianyu.ui.model.CpCustomer;
import com.tygas.tianyu.tianyu.ui.model.DistrictModel;
import com.tygas.tianyu.tianyu.ui.model.ProvinceModel;
import com.tygas.tianyu.tianyu.ui.model.SaveStatu;
import com.tygas.tianyu.tianyu.ui.model.User;
import com.tygas.tianyu.tianyu.ui.model.UserPtInfoModel;
import com.tygas.tianyu.tianyu.utils.HttpUtilsHelper;
import com.tygas.tianyu.tianyu.utils.JsonParser;
import com.tygas.tianyu.tianyu.utils.MyDialogHelper;
import com.tygas.tianyu.tianyu.utils.ProgressDialogHelper;
import com.tygas.tianyu.tianyu.utils.SystemBarUtils;
import com.tygas.tianyu.tianyu.utils.XmlParserHandler;
import com.tygas.tianyu.tianyu.utils.XutilsRequest;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

public class CpCustomInfoActivity extends Activity {


    private EditText et_references_carnumber;
    private RelativeLayout rl_references_carnumber;
    private RelativeLayout rl_info_channel;
    private RelativeLayout rl_info_more_channel;
    private LinearLayout ll_references_carnumber;
    private LinearLayout ll_info_channel;

    private EditText et_talkrecord;

    private TextView tv_name;
    private TextView tv_phone;
    private TextView tv_province;
    private TextView tv_city;
    private TextView tv_area;

    private TextView tv_info_channel;
    private TextView tv_isdrive;
    private TextView tv_followeperson;
    private TextView tv_intention_garde;
    private TextView tv_intention_chexi;
    private TextView tv_buyuse;
    private TextView tv_shop_channel;

    private TextView tv_intention_chexin;
    private TextView tv_intention_chese;
    private TextView tv_buycarjinyan;

    private GridView gv_focus;
    private CpCustomFocusAdapter cpCustomFocusAdapter;
    private User user;

    private String references_carnumbe;
    private String info_channel;

    private CpCustomer cpData;

    /**
     * 所有省
     */
    protected String[] mProvinceDatas;
    /**
     * key - 省 value - 市
     */
    protected Map<String, String[]> mCitisDatasMap = new HashMap<String, String[]>();
    /**
     * key - 市 values - 区
     */
    protected Map<String, String[]> mDistrictDatasMap = new HashMap<String, String[]>();

    private String province;
    private String city;
    private String district;

    private List<UserPtInfoModel> list_focus;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        SystemBarUtils.setSystemBarColor(this, "#327ECA");
        setContentView(R.layout.activity_cp_custom_info);
        user = ((MyAppCollection) getApplicationContext()).getUser();
        initProvinceDatas();
        initView();
        initData();
    }

    private void initView() {
        tv_name = (TextView) findViewById(R.id.activity_cpinfo_tv_name);
        tv_phone = (TextView) findViewById(R.id.activity_cpinfo_tv_phone);


        et_references_carnumber = (EditText) findViewById(R.id.activity_cpinfo_et_references_carnumber);
        et_references_carnumber.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                cpData.setOldCusCarNO(s.toString());
            }
        });

        rl_references_carnumber = (RelativeLayout) findViewById(R.id.activity_cpinfo_rl_references_carnumber);
        ll_references_carnumber = (LinearLayout) findViewById(R.id.activity_cpinfo_ll_references_carnumber);

        tv_info_channel = (TextView) findViewById(R.id.activity_cpinfo_tv_infochannel);
        rl_info_channel = (RelativeLayout) findViewById(R.id.activity_cpinfo_rl_infochannel);
        ll_info_channel = (LinearLayout) findViewById(R.id.activity_cpinfo_ll_infochannel);

        rl_info_more_channel = (RelativeLayout) findViewById(R.id.activity_cpinfo_rl_more_channel);

        tv_intention_chexin = (TextView) findViewById(R.id.activity_cpinfo_tv_intention_chexin);
        tv_intention_chese = (TextView) findViewById(R.id.activity_cpinfo_tv_intention_chese);
        tv_buycarjinyan = (TextView) findViewById(R.id.activity_cpinfo_tv_buycarjinyan);


//        cb_focus_brand = (CheckBox) findViewById(R.id.activity_cpinfo_cb_focus_brand);
//        cb_focus_price = (CheckBox) findViewById(R.id.activity_cpinfo_cb_focus_price);
//        cb_focus_power = (CheckBox) findViewById(R.id.activity_cpinfo_cb_focus_power);
//        cb_focus_safe = (CheckBox) findViewById(R.id.activity_cpinfo_cb_focus_safe);
//        cb_focus_fuelconsumption = (CheckBox) findViewById(R.id.activity_cpinfo_cb_focus_fuelconsumption);
//        cb_focus_appearance = (CheckBox) findViewById(R.id.activity_cpinfo_cb_focus_appearance);
//        cb_focus_confortable = (CheckBox) findViewById(R.id.activity_cpinfo_cb_focus_confortable);
//        cb_focus_configuration = (CheckBox) findViewById(R.id.activity_cpinfo_cb_focus_configuration);
//        cb_focus_other = (CheckBox) findViewById(R.id.activity_cpinfo_cb_focus_other);
        et_talkrecord = (EditText) findViewById(R.id.activity_cpinfo_et_talkrecord);
        et_talkrecord.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                cpData.setTalkProcess(s.toString());
            }
        });

        tv_isdrive = (TextView) findViewById(R.id.activity_cpinfo_tv_isdrive);
        tv_followeperson = (TextView) findViewById(R.id.activity_cpinfo_tv_followeperson);
        tv_intention_garde = (TextView) findViewById(R.id.activity_cpinfo_tv_intention_garde);
        tv_intention_chexi = (TextView) findViewById(R.id.activity_cpinfo_tv_intention_chexi);
        tv_buyuse = (TextView) findViewById(R.id.activity_cpinfo_tv_buyuse);
        tv_shop_channel = (TextView) findViewById(R.id.activity_cpinfo_tv_shopchannel);
        tv_province = (TextView) findViewById(R.id.activity_cpinfo_tv_province);
        tv_city = (TextView) findViewById(R.id.activity_cpinfo_tv_city);
        tv_area = (TextView) findViewById(R.id.activity_cpinfo_tv_area);
        gv_focus = (GridView) findViewById(R.id.activity_cpinfo_gv_focus);
        list_focus = user.getList_Focus();
        cpCustomFocusAdapter = new CpCustomFocusAdapter(this, list_focus);

        gv_focus.setAdapter(cpCustomFocusAdapter);
    }

    private void initData() {
        Intent intent = getIntent();
        Bundle bundle = intent.getBundleExtra("CpData");
        cpData = (CpCustomer) (bundle.getSerializable("CpData"));
        tv_name.setText(cpData.getCustomerName());
        tv_phone.setText(cpData.getCustomerPhone());
    }

    public void saveData(View view) {
        Log.d("boolean", cpCustomFocusAdapter.getList_checkinfo().toString());
        if (checkSaveDate()) {
            StringBuffer buffer = new StringBuffer();
            List<Boolean> list_checkinfo = cpCustomFocusAdapter.getList_checkinfo();
            boolean flagss = true;
            for (int i = 0; i < list_checkinfo.size(); i++) {
                if (list_checkinfo.get(i)) {
                    if (flagss) {
                        buffer.append(list_focus.get(i).getID() + "");
                    } else {
                        buffer.append("&" + list_focus.get(i).getID());
                    }
                    flagss = false;
                }
            }
            cpData.setFocusCarmodelID(buffer.toString());
            InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
            imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
            downLoadData();
        }
    }

    public void viewOnclick(View view) {
        switch (view.getId()) {
            case R.id.activity_cpinfo_rl_isdrive:
                MyDialogHelper myDialogHelper_isdriver = new MyDialogHelper();
                final List<String> list_isdriver = new ArrayList<String>();
                list_isdriver.add("是");
                list_isdriver.add("否");
                myDialogHelper_isdriver.showListDialog(this, "是否试驾", list_isdriver, (TextView) view.findViewById(R.id.activity_cpinfo_tv_isdrive), new MyDialogHelper.DialogCallBack() {
                    @Override
                    public void callBack(int position) {
                        cpData.setIsDrive(list_isdriver.get(position));
                    }
                });
                break;
            case R.id.activity_cpinfo_rl_followeperson:
                MyDialogHelper myDialogHelper_flperson = new MyDialogHelper();
                final List<String> list_flperson = new ArrayList<String>();
                list_flperson.add("1");
                list_flperson.add("2");
                list_flperson.add("3");
                list_flperson.add("4");
                list_flperson.add("5");
                myDialogHelper_flperson.showListDialog(this, "随行人数", list_flperson, (TextView) view.findViewById(R.id.activity_cpinfo_tv_followeperson), new MyDialogHelper.DialogCallBack() {
                    @Override
                    public void callBack(int position) {
                        cpData.setFollowPeo(list_flperson.get(position));
                    }
                });
                break;
            case R.id.activity_cpinfo_rl_shopchannel:
                MyDialogHelper myDialogHelper_shopchannel = new MyDialogHelper();
                final List<UserPtInfoModel> list_channel = user.getList_Channel();
                if (list_channel != null && list_channel.size() > 0) {
                    List<String> list_shopchannel = userPtInfoModeltoStringList(list_channel);
                    myDialogHelper_shopchannel.showListDialog(this, "来店渠道", list_shopchannel, (TextView) view.findViewById(R.id.activity_cpinfo_tv_shopchannel), new MyDialogHelper.DialogCallBack() {
                        @Override
                        public void callBack(int position) {
                            Log.d("ss", list_channel.get(position).toString());
                            cpData.setChannelId(list_channel.get(position).getID());
                            if ("网络".equals(list_channel.get(position).getName())) {
                                cpData.setOldCusCarNO("");
                                rl_info_more_channel.setVisibility(View.VISIBLE);
                                ll_references_carnumber.setVisibility(View.GONE);
                                ll_info_channel.setVisibility(View.VISIBLE);
                            } else if ("转介绍".equals(list_channel.get(position).getName())) {
                                cpData.setSourceChannelId("0");
                                rl_info_more_channel.setVisibility(View.VISIBLE);
                                ll_references_carnumber.setVisibility(View.VISIBLE);
                                ll_info_channel.setVisibility(View.GONE);
                            } else {
                                rl_info_more_channel.setVisibility(View.GONE);
                            }

                        }
                    });
                } else {
                    Toast.makeText(CpCustomInfoActivity.this, "没有数据", Toast.LENGTH_SHORT).show();
                }
                break;
            case R.id.activity_cpinfo_rl_intention_garde:
                MyDialogHelper myDialogHelper_garde = new MyDialogHelper();
                final List<String> list_garde = new ArrayList<String>();
                list_garde.add("H");
                list_garde.add("A");
                list_garde.add("B");
                list_garde.add("C");
                list_garde.add("D");
                myDialogHelper_garde.showListDialog(this, "意向等级", list_garde, (TextView) view.findViewById(R.id.activity_cpinfo_tv_intention_garde), new MyDialogHelper.DialogCallBack() {
                    @Override
                    public void callBack(int position) {
                        cpData.setIntentLevel(list_garde.get(position));
                    }
                });
                break;
            case R.id.activity_cpinfo_rl_intention_chexi:
                MyDialogHelper myDialogHelper_intention_chexi = new MyDialogHelper();
                List<UserPtInfoModel> list_intention_chexi = user.getList_CarSeries();
                if (list_intention_chexi != null && list_intention_chexi.size() > 0) {
                    final List<String> list_chexi = userPtInfoModeltoStringList(list_intention_chexi);
                    myDialogHelper_intention_chexi.showListDialog(this, "意向车系", list_chexi, (TextView) view.findViewById(R.id.activity_cpinfo_tv_intention_chexi), new MyDialogHelper.DialogCallBack() {
                        @Override
                        public void callBack(int position) {
                            cpData.setCarSeriesName(list_chexi.get(position));
                        }
                    });
                } else {
                    Toast.makeText(CpCustomInfoActivity.this, "没有数据", Toast.LENGTH_SHORT).show();
                }
                break;
            case R.id.activity_cpinfo_rl_intention_use:
                MyDialogHelper myDialogHelper_use = new MyDialogHelper();
                final List<UserPtInfoModel> list_ptuse = user.getList_Useage();
                if (list_ptuse != null && list_ptuse.size() > 0) {
                    final List<String> list_use = userPtInfoModeltoStringList(list_ptuse);
                    myDialogHelper_use.showListDialog(this, "购车用途", list_use, (TextView) view.findViewById(R.id.activity_cpinfo_tv_buyuse), new MyDialogHelper.DialogCallBack() {
                        @Override
                        public void callBack(int position) {
                            cpData.setUseageID(list_ptuse.get(position).getID());
                        }
                    });
                } else {
                    Toast.makeText(CpCustomInfoActivity.this, "没有数据", Toast.LENGTH_SHORT).show();
                }
                break;
            case R.id.activity_cpinfo_rl_province:
                MyDialogHelper myDialogHelper_province = new MyDialogHelper();
                List<String> list_province = Arrays.asList(mProvinceDatas);
                myDialogHelper_province.showListDialog(this, "常住省", list_province, (TextView) view.findViewById(R.id.activity_cpinfo_tv_province), new MyDialogHelper.DialogCallBack() {
                    @Override
                    public void callBack(int position) {
                        province = mProvinceDatas[position];
                        cpData.setLiveProvince(province);
                    }
                });
                break;
            case R.id.activity_cpinfo_rl_city:
                if (!TextUtils.isEmpty(province)) {
                    MyDialogHelper myDialogHelper_city = new MyDialogHelper();
                    final List<String> list_city = Arrays.asList(mCitisDatasMap.get(province));
                    myDialogHelper_city.showListDialog(this, "常住市", list_city, (TextView) view.findViewById(R.id.activity_cpinfo_tv_city), new MyDialogHelper.DialogCallBack() {
                        @Override
                        public void callBack(int position) {
                            city = list_city.get(position);
                            cpData.setLiveCity(city);
                        }
                    });
                } else {
                    Toast.makeText(CpCustomInfoActivity.this, "请选择省", Toast.LENGTH_SHORT).show();
                }

                break;
            case R.id.activity_cpinfo_rl_area:
                if (!TextUtils.isEmpty(city)) {
                    MyDialogHelper myDialogHelper_area = new MyDialogHelper();
                    final List<String> list_area = Arrays.asList(mDistrictDatasMap.get(city));

                    myDialogHelper_area.showListDialog(this, "常住区", list_area, (TextView) view.findViewById(R.id.activity_cpinfo_tv_area), new MyDialogHelper.DialogCallBack() {
                        @Override
                        public void callBack(int position) {
                            cpData.setLiveArea(list_area.get(position));
                        }
                    });
                } else {
                    Toast.makeText(CpCustomInfoActivity.this, "请选择市", Toast.LENGTH_SHORT).show();
                }
                break;
            case R.id.activity_cpinfo_rl_intention_chexin:
                MyDialogHelper myDialogHelper_intention_chexin = new MyDialogHelper();
                List<UserPtInfoModel> list_intention_chexin = user.getList_Brand();
                if (list_intention_chexin != null && list_intention_chexin.size() > 0) {
                    final List<String> list_chexin = userPtInfoModeltoStringList(list_intention_chexin);
                    myDialogHelper_intention_chexin.showListDialog(this, "意向车型", list_chexin, (TextView) view.findViewById(R.id.activity_cpinfo_tv_intention_chexin), new MyDialogHelper.DialogCallBack() {
                        @Override
                        public void callBack(int position) {
                            cpData.setCarModelName(list_chexin.get(position));
                        }
                    });
                } else {
                    Toast.makeText(CpCustomInfoActivity.this, "没有数据", Toast.LENGTH_SHORT).show();
                }
                break;

            case R.id.activity_cpinfo_rl_intention_chese:
                MyDialogHelper myDialogHelper_intention_chese = new MyDialogHelper();
                List<UserPtInfoModel> list_intention_chese = user.getList_CheckColorList();
                if (list_intention_chese != null && list_intention_chese.size() > 0) {
                    final List<String> list_chese = userPtInfoModeltoStringList(list_intention_chese);
                    myDialogHelper_intention_chese.showListDialog(this, "意向车色", list_chese, (TextView) view.findViewById(R.id.activity_cpinfo_tv_intention_chese), new MyDialogHelper.DialogCallBack() {
                        @Override
                        public void callBack(int position) {
                            cpData.setCarColor(list_chese.get(position));
                        }
                    });
                } else {
                    Toast.makeText(CpCustomInfoActivity.this, "没有数据", Toast.LENGTH_SHORT).show();
                }
                break;

            case R.id.activity_cpinfo_rl_buycarjinyan:
                MyDialogHelper myDialogHelper_jinyan = new MyDialogHelper();
                final List<String> list_st_jinyan = new ArrayList<String>();
                list_st_jinyan.add("置换");
                list_st_jinyan.add("新购");
                myDialogHelper_jinyan.showListDialog(this, "购车经验", list_st_jinyan, (TextView) view.findViewById(R.id.activity_cpinfo_tv_buycarjinyan), new MyDialogHelper.DialogCallBack() {
                    @Override
                    public void callBack(int position) {
                        cpData.setIsChange(list_st_jinyan.get(position));
                    }
                });
                break;

            case R.id.activity_cpinfo_rl_infochannel:
                MyDialogHelper myDialogHelper_infochannel = new MyDialogHelper();
                final List<String> list_infochannel = new ArrayList<String>();
                list_infochannel.add("微信");
                list_infochannel.add("网上车市");
                list_infochannel.add("易车网");
                list_infochannel.add("太平洋汽车");
                list_infochannel.add("汽车之家");
                list_infochannel.add("汽车点评网");
                list_infochannel.add("新浪网");
                list_infochannel.add("腾讯");
                list_infochannel.add("易集客");
                list_infochannel.add("百度");
                list_infochannel.add("爱卡汽车");
                list_infochannel.add("厂家下发");
                list_infochannel.add("汽车之家来电");
                list_infochannel.add("易车网来电");
                list_infochannel.add("爱卡汽车来电");
                list_infochannel.add("太平洋汽车来电");
                list_infochannel.add("公司座机来电");
                list_infochannel.add("其它");
                myDialogHelper_infochannel.showListDialog(this, "信息渠道", list_infochannel, (TextView) view.findViewById(R.id.activity_cpinfo_tv_infochannel), new MyDialogHelper.DialogCallBack() {
                    @Override
                    public void callBack(int position) {
                        cpData.setSourceChannelId(list_infochannel.get(position));
                    }
                });
                break;
        }
    }

    private void downLoadData() {

        ProgressDialogHelper.showProgressDialog(this, "正在上传数据...");
        HttpUtilsHelper.httpUtils.send(HttpRequest.HttpMethod.POST, UrlData.PCINFOSAVE_URL, XutilsRequest.saveCpCustomer(user.getEmpId(), cpData),
                new RequestCallBack<String>() {
                    @Override
                    public void onSuccess(ResponseInfo<String> objectResponseInfo) {

                        Log.d("cpresult", objectResponseInfo.result);
                        SaveStatu saveStatu = JsonParser.saveCustomersParser(objectResponseInfo.result);
                        if (saveStatu.isSaveDate()) {

                        } else {
                            Toast.makeText(CpCustomInfoActivity.this, saveStatu.getMessage(), Toast.LENGTH_SHORT).show();
                        }
                        ProgressDialogHelper.dismissProgressDialog();

                    }

                    @Override
                    public void onFailure(HttpException e, String s) {
                        Toast.makeText(CpCustomInfoActivity.this, "网络请求出错，请检查网络", Toast.LENGTH_SHORT).show();
                        ProgressDialogHelper.dismissProgressDialog();
                    }
                });
    }


    private boolean checkSaveDate() {
        boolean flag = true;

        if (!TextUtils.isEmpty(cpData.getChannelId())) {
            if ("网络".equals(cpData.getChannelId())) {
                if (TextUtils.isEmpty(cpData.getSourceChannelId())) {
                    flag = false;
                    Toast.makeText(CpCustomInfoActivity.this, "未选择信息渠道", Toast.LENGTH_SHORT).show();
                }
            } else if ("转介绍".equals(cpData.getChannelId())) {
                if (TextUtils.isEmpty(cpData.getOldCusCarNO())) {
                    flag = false;
                    Toast.makeText(CpCustomInfoActivity.this, "未选择转介绍人车牌号", Toast.LENGTH_SHORT).show();
                }
            }
        } else {
            Toast.makeText(CpCustomInfoActivity.this, "未选择来店渠道", Toast.LENGTH_SHORT).show();
            flag = false;
        }

        if (TextUtils.isEmpty(cpData.getIsDrive())) {
            Toast.makeText(CpCustomInfoActivity.this, "未选择是否试驾", Toast.LENGTH_SHORT).show();
            flag = false;
        } else if (TextUtils.isEmpty(cpData.getFollowPeo())) {
            Toast.makeText(CpCustomInfoActivity.this, "未选择随行人数", Toast.LENGTH_SHORT).show();
            flag = false;
        } else if (TextUtils.isEmpty(cpData.getIntentLevel())) {
            Toast.makeText(CpCustomInfoActivity.this, "未选择意向等级", Toast.LENGTH_SHORT).show();
            flag = false;
        }
//        else if (TextUtils.isEmpty(cpData.getCarSeriesName())) {
//            Toast.makeText(CpCustomInfoActivity.this, "未选择意向车系", Toast.LENGTH_SHORT).show();
//            flag = false;
//        }
        else if (TextUtils.isEmpty(cpData.getCarModelName())) {
            Toast.makeText(CpCustomInfoActivity.this, "未选择意向车型", Toast.LENGTH_SHORT).show();
            flag = false;
        } else if (TextUtils.isEmpty(cpData.getUseageID())) {
            Toast.makeText(CpCustomInfoActivity.this, "未选择购买用途", Toast.LENGTH_SHORT).show();
            flag = false;
        } else if (TextUtils.isEmpty(cpData.getChannelId())) {
            Toast.makeText(CpCustomInfoActivity.this, "未选择购买经验", Toast.LENGTH_SHORT).show();
            flag = false;
        } else if (TextUtils.isEmpty(cpData.getTalkProcess())) {
            Toast.makeText(CpCustomInfoActivity.this, "未填写洽谈记录", Toast.LENGTH_SHORT).show();
            flag = false;
        }

        boolean flag_check = false;
        for (Boolean flges : cpCustomFocusAdapter.getList_checkinfo()) {
            if (flges) {
                flag_check = true;
            }
        }
        if (!flag_check) {
            Toast.makeText(CpCustomInfoActivity.this, "未勾选意向类型", Toast.LENGTH_SHORT).show();
            flag = false;
        }


        return flag;
    }


    private List<String> userPtInfoModeltoStringList(List<UserPtInfoModel> list) {
        List<String> strings = new ArrayList<String>();
        for (UserPtInfoModel userPtInfoModel : list) {
            String name = userPtInfoModel.getName();
            strings.add(name);
        }
        return strings;
    }

    /**
     * 解析省市区的XML数据
     */

    protected void initProvinceDatas() {
        List<ProvinceModel> provinceList = null;
        AssetManager asset = getAssets();
        try {
            InputStream input = asset.open("province_data.xml");
            // 创建一个解析xml的工厂对象
            SAXParserFactory spf = SAXParserFactory.newInstance();
            // 解析xml
            SAXParser parser = spf.newSAXParser();
            XmlParserHandler handler = new XmlParserHandler();
            parser.parse(input, handler);
            input.close();
            // 获取解析出来的数据
            provinceList = handler.getDataList();

            //*/
            mProvinceDatas = new String[provinceList.size()];
            for (int i = 0; i < provinceList.size(); i++) {
                // 遍历所有省的数据
                mProvinceDatas[i] = provinceList.get(i).getName();
                List<CityModel> cityList = provinceList.get(i).getCityList();
                String[] cityNames = new String[cityList.size()];
                for (int j = 0; j < cityList.size(); j++) {
                    // 遍历省下面的所有市的数据
                    cityNames[j] = cityList.get(j).getName();
                    List<DistrictModel> districtList = cityList.get(j).getDistrictList();
                    String[] distrinctNameArray = new String[districtList.size()];
                    DistrictModel[] distrinctArray = new DistrictModel[districtList.size()];
                    for (int k = 0; k < districtList.size(); k++) {
                        // 遍历市下面所有区/县的数据
                        DistrictModel districtModel = new DistrictModel(districtList.get(k).getName(), districtList.get(k).getZipcode());
                        // 区/县对于的邮编，保存到mZipcodeDatasMap
                        // mZipcodeDatasMap.put(districtList.get(k).getName(), districtList.get(k).getZipcode());
                        distrinctArray[k] = districtModel;
                        distrinctNameArray[k] = districtModel.getName();
                    }
                    // 市-区/县的数据，保存到mDistrictDatasMap
                    mDistrictDatasMap.put(cityNames[j], distrinctNameArray);
                }
                // 省-市的数据，保存到mCitisDatasMap
                mCitisDatasMap.put(provinceList.get(i).getName(), cityNames);
            }
        } catch (Throwable e) {
            e.printStackTrace();
        } finally {

        }
    }

}
